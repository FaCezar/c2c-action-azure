name: docker_build_push_acr

on:
  workflow_dispatch:

jobs:
  docker_build_push_acr:
    name: 'Docker Build and Push to ACR'
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download twistcli from the Prisma Cloud Compute Console
      run: |
        curl --user ${{ secrets.PRISMA_ACCESS_KEY }}:${{ secrets.PRISMA_SECRET_KEY }} --output ./twistcli ${{secrets.PRISMA_COMPUTE_URL }}/api/v1/util/twistcli; chmod a+x ./twistcli
        
    - name: 'Docker Login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
       
    - name: Build the frontend image and push it to ACR
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/c2c-trace:${{ github.sha }}
        file: Dockerfile

    - name: Run Prisma Cloud 
      id: prisma-cloud
      uses: bridgecrewio/checkov-action@master
      env:
       PRISMA_API_URL: https://api4.prismacloud.io
      with:
       api-key: ${{ secrets.BC_API_KEY }}
       use_enforcement_rules: true
       download_external_modules: true
       repo_root_for_plan_enrichment: ./
      
    - name: Scan the image
      env:
       IMAGE_TAG: nodejs_demo_image
      run: ./twistcli images scan --address ${{ secrets.PRISMA_COMPUTE_URL }} --user ${{ secrets.PRISMA_ACCESS_KEY }} --password${{ secrets.PRISMA_SECRET_KEY }} --details $IMAGE_TAG
